"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.JWTCredentials = exports.PATCredentials = exports.BasicAuthCredentials = exports.APICredentials = void 0;
const requests_1 = require("../https/requests");
const logging_1 = require("../logging/logging");
const base64_1 = require("../util/base64");
class APICredentials {
}
exports.APICredentials = APICredentials;
class BasicAuthCredentials extends APICredentials {
    username;
    password;
    constructor(username, password) {
        super();
        this.username = username;
        this.password = password;
    }
    getAuthenticationHeader() {
        // See: https://developer.atlassian.com/server/jira/platform/basic-authentication/#construct-the-authorization-header
        const encodedString = (0, base64_1.encode)(`${this.username}:${this.password}`);
        return new Promise((resolve) => resolve({
            Authorization: `Basic ${encodedString}`,
        }));
    }
}
exports.BasicAuthCredentials = BasicAuthCredentials;
class PATCredentials extends APICredentials {
    token;
    constructor(token) {
        super();
        this.token = token;
    }
    getAuthenticationHeader() {
        return new Promise((resolve) => resolve({
            Authorization: `Bearer ${this.token}`,
        }));
    }
}
exports.PATCredentials = PATCredentials;
class JWTCredentials extends APICredentials {
    clientId;
    clientSecret;
    token;
    constructor(clientId, clientSecret) {
        super();
        this.clientId = clientId;
        this.clientSecret = clientSecret;
        this.token = undefined;
    }
    async getToken(authenticationURL) {
        if (!this.token) {
            (0, logging_1.logInfo)(`Authenticating to: ${authenticationURL}...`);
            return requests_1.Requests.post(authenticationURL, {
                client_id: this.clientId,
                client_secret: this.clientSecret,
            }).then((response) => {
                (0, logging_1.logSuccess)("Authentication successful.");
                this.token = response.data;
                return this.token;
            });
        }
        return this.token;
    }
    async getAuthenticationHeader(options) {
        const token = await this.getToken(options.authenticationURL);
        return {
            Authorization: `Bearer ${token}`,
        };
    }
}
exports.JWTCredentials = JWTCredentials;
