"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.issuesByScenario = void 0;
const logging_1 = require("../logging/logging");
function issueTagOf(scenario, projectKey) {
    // Xray cloud: @TestName:CYP-123
    // Xray server: @CYP-123
    const regex = new RegExp(`@(?:TestName:)?(${projectKey}-\\d+)`);
    const issueKeys = [];
    for (const tag of scenario.tags) {
        const matches = tag.name.match(regex);
        if (!matches) {
            continue;
        }
        else if (matches.length === 2) {
            // Element [0] is the entire matched string, element [1] the first captured group.
            issueKeys.push(matches[1]);
        }
    }
    if (issueKeys.length === 0) {
        (0, logging_1.logInfo)(`No issue keys found in tags of scenario "${scenario.name}.`);
    }
    else if (issueKeys.length === 1) {
        return issueKeys[0];
    }
    else {
        (0, logging_1.logWarning)(`Multiple issue keys found in tags of scenario "${scenario.name}": ` +
            `${issueKeys.join(", ")}`);
        (0, logging_1.logWarning)(`The plugin will use the first one: ${issueKeys[0]}.`);
    }
    return undefined;
}
/**
 * Builds a mapping of scenarios titles to Xray issue keys based on the provided feature.
 *
 * @param feature the Gherkin feature object with all its data
 * @param projectKey the project keys to look out for
 * @returns an object mapping scenario titles to Xray issue keys
 *
 * @example
 *   // the following feature file:
 *
 *   'Feature: Logins'
 *
 *     '@PRJ-1234'
 *     'Scenario: Successful login'
 *        [...]
 *
 *     '@PRJ-9876'
 *     'Scenario: Unsuccessful login'
 *        [...]
 *
 *  const issues = issuesByScenario([...], 'PRJ');
 *  console.log(issues);
 *  // prints the following:
 *   {
 *     'Successful login': 'PRJ-1234',
 *     'Unsuccessful login': 'PRJ-9876',
 *   }
 */
function issuesByScenario(feature, projectKey) {
    const issues = {};
    feature.children.map((child) => {
        if (child.scenario) {
            issues[child.scenario.name] = issueTagOf(child.scenario, projectKey);
        }
    });
    return issues;
}
exports.issuesByScenario = issuesByScenario;
