"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Requests = void 0;
const axios_1 = __importDefault(require("axios"));
const fs_1 = require("fs");
const https_1 = require("https");
const context_1 = require("../context");
const logging_1 = require("../logging/logging");
const files_1 = require("../util/files");
class Requests {
    static AGENT = undefined;
    static agent() {
        if (!Requests.AGENT) {
            Requests.AGENT = new https_1.Agent({
                ca: Requests.readCertificate(context_1.CONTEXT.config.openSSL.rootCAPath),
                secureOptions: context_1.CONTEXT.config.openSSL.secureOptions,
            });
        }
        return Requests.AGENT;
    }
    static readCertificate(path) {
        if (!path) {
            return undefined;
        }
        return (0, fs_1.readFileSync)(path);
    }
    static async get(url, config) {
        if (!context_1.CONTEXT.config.plugin.debug) {
            return axios_1.default.get(url, {
                ...config,
                httpsAgent: Requests.agent(),
            });
        }
        const timestamp = Date.now();
        this.logRequest("GET", url, timestamp, null, config);
        const response = await axios_1.default.get(url, {
            ...config,
            httpsAgent: Requests.agent(),
        });
        this.logResponse("GET", url, timestamp, response);
        return response;
    }
    static async post(url, data, config) {
        if (!context_1.CONTEXT.config.plugin.debug) {
            return axios_1.default.post(url, data, {
                ...config,
                httpsAgent: Requests.agent(),
            });
        }
        const timestamp = Date.now();
        this.logRequest("POST", url, timestamp, data, config);
        const response = await axios_1.default.post(url, data, {
            ...config,
            httpsAgent: Requests.agent(),
        });
        this.logResponse("POST", url, timestamp, response);
        return response;
    }
    // Debug utilities.
    static logRequest(method, url, timestamp, data, config) {
        const filename = (0, files_1.normalizedFilename)(`${method}_${url}_${timestamp}`);
        (0, logging_1.logDebug)(`Writing ${method} request data to ${filename}_request.json.`);
        if (data) {
            (0, fs_1.writeFileSync)(`${filename}_request.json`, JSON.stringify({
                url: url,
                body: data,
                config: config,
            }));
        }
        else {
            (0, fs_1.writeFileSync)(`${filename}_request.json`, JSON.stringify({
                url: url,
                config: config,
            }));
        }
    }
    static logResponse(method, url, timestamp, response) {
        const filename = (0, files_1.normalizedFilename)(`${method}_${url}_${timestamp}`);
        (0, logging_1.logDebug)(`Writing ${method} response data to ${filename}_response.json.`);
        (0, fs_1.writeFileSync)(`${filename}_response.json`, JSON.stringify({
            data: response.data,
            headers: response.headers,
            status: response.status,
            statusText: response.statusText,
        }));
    }
}
exports.Requests = Requests;
