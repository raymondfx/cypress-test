"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.initJiraClient = exports.initXrayClient = exports.parseEnvironmentVariables = void 0;
const credentials_1 = require("../authentication/credentials");
const jiraClient_1 = require("../client/jira/jiraClient");
const xrayClientCloud_1 = require("../client/xray/xrayClientCloud");
const xrayClientServer_1 = require("../client/xray/xrayClientServer");
const constants_1 = require("../constants");
const context_1 = require("../context");
const logging_1 = require("../logging/logging");
const parsing_1 = require("./parsing");
function parseEnvironmentVariables(env) {
    // Jira.
    if (constants_1.ENV_JIRA_PROJECT_KEY in env) {
        context_1.CONTEXT.config.jira.projectKey = env[constants_1.ENV_JIRA_PROJECT_KEY];
    }
    if (constants_1.ENV_JIRA_URL in env) {
        context_1.CONTEXT.config.jira.url = env[constants_1.ENV_JIRA_URL];
    }
    if (constants_1.ENV_JIRA_TEST_EXECUTION_ISSUE_KEY in env) {
        context_1.CONTEXT.config.jira.testExecutionIssueKey = env[constants_1.ENV_JIRA_TEST_EXECUTION_ISSUE_KEY];
    }
    if (constants_1.ENV_JIRA_TEST_PLAN_ISSUE_KEY in env) {
        context_1.CONTEXT.config.jira.testPlanIssueKey = env[constants_1.ENV_JIRA_TEST_PLAN_ISSUE_KEY];
    }
    if (constants_1.ENV_JIRA_ATTACH_VIDEOS in env) {
        context_1.CONTEXT.config.jira.attachVideos = (0, parsing_1.parseBoolean)(env[constants_1.ENV_JIRA_ATTACH_VIDEOS]);
    }
    if (constants_1.ENV_JIRA_CREATE_TEST_ISSUES in env) {
        context_1.CONTEXT.config.jira.createTestIssues = (0, parsing_1.parseBoolean)(env[constants_1.ENV_JIRA_CREATE_TEST_ISSUES]);
    }
    if (constants_1.ENV_JIRA_TEST_EXECUTION_ISSUE_SUMMARY in env) {
        context_1.CONTEXT.config.jira.testExecutionIssueSummary = env[constants_1.ENV_JIRA_TEST_EXECUTION_ISSUE_SUMMARY];
    }
    if (constants_1.ENV_JIRA_TEST_EXECUTION_ISSUE_DESCRIPTION in env) {
        context_1.CONTEXT.config.jira.testExecutionIssueDescription =
            env[constants_1.ENV_JIRA_TEST_EXECUTION_ISSUE_DESCRIPTION];
    }
    // Xray.
    if (constants_1.ENV_XRAY_TEST_TYPE in env) {
        context_1.CONTEXT.config.xray.testType = env[constants_1.ENV_XRAY_TEST_TYPE];
    }
    if (constants_1.ENV_XRAY_UPLOAD_RESULTS in env) {
        context_1.CONTEXT.config.xray.uploadResults = (0, parsing_1.parseBoolean)(env[constants_1.ENV_XRAY_UPLOAD_RESULTS]);
    }
    if (constants_1.ENV_XRAY_UPLOAD_SCREENSHOTS in env) {
        context_1.CONTEXT.config.xray.uploadScreenshots = (0, parsing_1.parseBoolean)(env[constants_1.ENV_XRAY_UPLOAD_SCREENSHOTS]);
    }
    if (constants_1.ENV_XRAY_STATUS_PASSED in env) {
        context_1.CONTEXT.config.xray.statusPassed = env[constants_1.ENV_XRAY_STATUS_PASSED];
    }
    if (constants_1.ENV_XRAY_STATUS_PENDING in env) {
        context_1.CONTEXT.config.xray.statusPending = env[constants_1.ENV_XRAY_STATUS_PENDING];
    }
    if (constants_1.ENV_XRAY_STATUS_SKIPPED in env) {
        context_1.CONTEXT.config.xray.statusSkipped = env[constants_1.ENV_XRAY_STATUS_SKIPPED];
    }
    if (constants_1.ENV_XRAY_STATUS_FAILED in env) {
        context_1.CONTEXT.config.xray.statusFailed = env[constants_1.ENV_XRAY_STATUS_FAILED];
    }
    if (constants_1.ENV_XRAY_STEPS_UPDATE in env) {
        context_1.CONTEXT.config.xray.steps.update = (0, parsing_1.parseBoolean)(env[constants_1.ENV_XRAY_STEPS_UPDATE]);
    }
    if (constants_1.ENV_XRAY_STEPS_MAX_LENGTH_ACTION in env) {
        context_1.CONTEXT.config.xray.steps.maxLengthAction = Number.parseInt(env[constants_1.ENV_XRAY_STEPS_MAX_LENGTH_ACTION]);
    }
    // Cucumber.
    if (constants_1.ENV_CUCUMBER_FEATURE_FILE_EXTENSION in env) {
        context_1.CONTEXT.config.cucumber.featureFileExtension = env[constants_1.ENV_CUCUMBER_FEATURE_FILE_EXTENSION];
    }
    if (constants_1.ENV_CUCUMBER_UPLOAD_FEATURES in env) {
        context_1.CONTEXT.config.cucumber.uploadFeatures = (0, parsing_1.parseBoolean)(env[constants_1.ENV_CUCUMBER_UPLOAD_FEATURES]);
    }
    if (constants_1.ENV_CUCUMBER_DOWNLOAD_FEATURES in env) {
        context_1.CONTEXT.config.cucumber.downloadFeatures = (0, parsing_1.parseBoolean)(env[constants_1.ENV_CUCUMBER_DOWNLOAD_FEATURES]);
    }
    // Plugin.
    if (constants_1.ENV_PLUGIN_OVERWRITE_ISSUE_SUMMARY in env) {
        context_1.CONTEXT.config.plugin.overwriteIssueSummary = (0, parsing_1.parseBoolean)(env[constants_1.ENV_PLUGIN_OVERWRITE_ISSUE_SUMMARY]);
    }
    if (constants_1.ENV_PLUGIN_NORMALIZE_SCREENSHOT_NAMES in env) {
        context_1.CONTEXT.config.plugin.normalizeScreenshotNames = (0, parsing_1.parseBoolean)(env[constants_1.ENV_PLUGIN_NORMALIZE_SCREENSHOT_NAMES]);
    }
    if (constants_1.ENV_PLUGIN_DEBUG in env) {
        context_1.CONTEXT.config.plugin.debug = (0, parsing_1.parseBoolean)(env[constants_1.ENV_PLUGIN_DEBUG]);
    }
    // OpenSSL.
    if (constants_1.ENV_OPENSSL_ROOT_CA_PATH in env) {
        context_1.CONTEXT.config.openSSL.rootCAPath = env[constants_1.ENV_OPENSSL_ROOT_CA_PATH];
    }
    if (constants_1.ENV_OPENSSL_SECURE_OPTIONS in env) {
        context_1.CONTEXT.config.openSSL.secureOptions = env[constants_1.ENV_OPENSSL_SECURE_OPTIONS];
    }
}
exports.parseEnvironmentVariables = parseEnvironmentVariables;
function initXrayClient(env) {
    if (constants_1.ENV_XRAY_CLIENT_ID in env && constants_1.ENV_XRAY_CLIENT_SECRET in env) {
        (0, logging_1.logInfo)("Xray client ID and client secret found. Setting up Xray cloud credentials.");
        context_1.CONTEXT.xrayClient = new xrayClientCloud_1.XrayClientCloud(new credentials_1.JWTCredentials(env[constants_1.ENV_XRAY_CLIENT_ID], env[constants_1.ENV_XRAY_CLIENT_SECRET]));
    }
    else if (constants_1.ENV_JIRA_API_TOKEN in env && context_1.CONTEXT.config.jira.url) {
        (0, logging_1.logInfo)("Jira PAT found. Setting up Xray PAT credentials.");
        context_1.CONTEXT.xrayClient = new xrayClientServer_1.XrayClientServer(context_1.CONTEXT.config.jira.url, new credentials_1.PATCredentials(env[constants_1.ENV_JIRA_API_TOKEN]));
    }
    else if (constants_1.ENV_JIRA_USERNAME in env && constants_1.ENV_JIRA_PASSWORD in env && context_1.CONTEXT.config.jira.url) {
        (0, logging_1.logInfo)("Jira username and password found. Setting up Xray basic auth credentials.");
        context_1.CONTEXT.xrayClient = new xrayClientServer_1.XrayClientServer(context_1.CONTEXT.config.jira.url, new credentials_1.BasicAuthCredentials(env[constants_1.ENV_JIRA_USERNAME], env[constants_1.ENV_JIRA_PASSWORD]));
    }
    else {
        throw new Error("Failed to configure Xray uploader: no viable Xray configuration was found or the configuration you provided is not supported.\n" +
            "You can find all configurations currently supported at https://qytera-gmbh.github.io/projects/cypress-xray-plugin/section/configuration/authentication/");
    }
}
exports.initXrayClient = initXrayClient;
function initJiraClient(env) {
    const dependentOptions = getJiraClientDependentOptions();
    if (!dependentOptions) {
        return;
    }
    if (!context_1.CONTEXT.config.jira.url) {
        throw new Error(`Failed to configure Jira client: no Jira URL was provided. Configured options which necessarily require a configured Jira client:\n${dependentOptions}`);
    }
    if (constants_1.ENV_JIRA_API_TOKEN in env && constants_1.ENV_JIRA_USERNAME in env) {
        // Jira Cloud authentication: username (Email) and token.
        (0, logging_1.logInfo)("Jira username and API token found. Setting up basic auth credentials for Jira cloud.");
        context_1.CONTEXT.jiraClient = new jiraClient_1.JiraClient(context_1.CONTEXT.config.jira.url, new credentials_1.BasicAuthCredentials(env[constants_1.ENV_JIRA_USERNAME], env[constants_1.ENV_JIRA_API_TOKEN]));
    }
    else if (constants_1.ENV_JIRA_API_TOKEN in env) {
        // Jira Server authentication: no username, only token.
        (0, logging_1.logInfo)("Jira PAT found. Setting up PAT credentials for Jira server.");
        context_1.CONTEXT.jiraClient = new jiraClient_1.JiraClient(context_1.CONTEXT.config.jira.url, new credentials_1.PATCredentials(env[constants_1.ENV_JIRA_API_TOKEN]));
    }
    else if (constants_1.ENV_JIRA_USERNAME in env && constants_1.ENV_JIRA_PASSWORD in env) {
        // Jira Server authentication: username and password.
        (0, logging_1.logInfo)("Jira username and password found. Setting up basic auth credentials for Jira server.");
        context_1.CONTEXT.jiraClient = new jiraClient_1.JiraClient(context_1.CONTEXT.config.jira.url, new credentials_1.BasicAuthCredentials(env[constants_1.ENV_JIRA_USERNAME], env[constants_1.ENV_JIRA_PASSWORD]));
    }
    else {
        throw new Error("Failed to configure Jira client: no viable authentication method was configured.\n" +
            "You can find all configurations currently supported at https://qytera-gmbh.github.io/projects/cypress-xray-plugin/section/configuration/authentication/");
    }
}
exports.initJiraClient = initJiraClient;
function getJiraClientDependentOptions() {
    let dependentOptions = [];
    if (context_1.CONTEXT.config.jira.attachVideos) {
        const optionName = `${getPropertyName(context_1.CONTEXT.config, (x) => x.jira)}.${getPropertyName(context_1.CONTEXT.config.jira, (x) => x.attachVideos)}`;
        dependentOptions.push(`${optionName} = ${context_1.CONTEXT.config.jira.attachVideos}`);
    }
    if (dependentOptions.length === 0) {
        return;
    }
    return `[\n\t${dependentOptions.join("\t\n")}\n]`;
}
/**
 * Returns a property's name from an object as a string.
 *
 * @param obj the object
 * @param selector the property whose name is required
 * @returns the property as a string
 * @see https://stackoverflow.com/a/59498264
 */
function getPropertyName(obj, selector) {
    const keyRecord = Object.keys(obj).reduce((res, key) => {
        const typedKey = key;
        res[typedKey] = typedKey;
        return res;
    }, {});
    return selector(keyRecord);
}
