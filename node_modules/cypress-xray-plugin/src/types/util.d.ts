type UnionKeys<T> = T extends T ? keyof T : never;
type Expand<T> = T extends T ? {
    [K in keyof T]: T[K];
} : never;
export type OneOf<T extends {}[]> = {
    [K in keyof T]: Expand<T[K] & Partial<Record<Exclude<UnionKeys<T[number]>, keyof T[K]>, never>>>;
}[number];
export type DateTimeISO = string;
/**
 * Return an enum key based on its value, i.e. performs a reverse lookup of enum values to enum
 * keys.
 *
 * @param enumType the enum
 * @param enumValue the enum value
 * @returns the corresponding enum key or null if there are zero or more than one matching keys
 * @see https://stackoverflow.com/a/54297863
 */
export declare function getEnumKeyByEnumValue<K extends string, V extends string | number>(enumType: {
    [key in K]: V;
}, enumValue: V): string | null;
export {};
