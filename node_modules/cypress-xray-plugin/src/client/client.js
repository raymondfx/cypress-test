"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Client = void 0;
const axios_1 = require("axios");
const fs_1 = require("fs");
const logging_1 = require("../logging/logging");
/**
 * A basic client interface which stores credentials data used for communicating with a server.
 */
class Client {
    credentials;
    /**
     * Construct a new client using the provided credentials.
     *
     * @param credentials the credentials to use during authentication
     */
    constructor(credentials) {
        this.credentials = credentials;
    }
    /**
     * Return the client's credentials;
     *
     * @returns the credentials
     */
    getCredentials() {
        return this.credentials;
    }
    /**
     * Writes an error to a file (e.g. HTTP response errors).
     *
     * @param error the error
     * @param filename the filename to use for the file
     */
    writeErrorFile(error, filename) {
        let errorFileName;
        let errorData;
        if ((0, axios_1.isAxiosError)(error)) {
            errorFileName = `${filename}.json`;
            errorData = JSON.stringify({
                error: error.toJSON(),
                response: error.response?.data,
            });
        }
        else {
            errorFileName = `${filename}.log`;
            errorData = JSON.stringify(error);
        }
        (0, fs_1.writeFileSync)(errorFileName, errorData);
        (0, logging_1.logError)(`Complete error logs have been written to "${errorFileName}"`);
    }
    LOG_RESPONSE_INTERVAL_MS = 10000;
    /**
     * Starts an informative timer which tells the user for how long they have
     * been waiting for a response already.
     *
     * @param url the request URL
     * @returns the timer's handler
     */
    startResponseInterval(url) {
        let sumTime = 0;
        const callback = () => {
            sumTime = sumTime + this.LOG_RESPONSE_INTERVAL_MS;
            (0, logging_1.logInfo)(`Waiting for ${url} to respond... (${sumTime / 1000} seconds)`);
        };
        return setInterval(callback, this.LOG_RESPONSE_INTERVAL_MS);
    }
}
exports.Client = Client;
