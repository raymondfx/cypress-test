"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.XrayClient = void 0;
const logging_1 = require("../../logging/logging");
const client_1 = require("../client");
/**
 * An abstract Xray client class for communicating with Xray instances.
 */
class XrayClient extends client_1.Client {
    /**
     * Construct a new Xray client using the provided credentials.
     *
     * @param credentials the credentials to use during authentication
     */
    constructor(credentials) {
        super(credentials);
    }
    /**
     * Uploads test results to the Xray instance.
     *
     * @param results the test results as provided by Cypress
     * @returns the key of the test execution issue or null if the upload was skipped
     * @see https://docs.getxray.app/display/XRAYCLOUD/Import+Execution+Results+-+REST+v2
     */
    async importTestExecutionResults(results) {
        try {
            const key = await this.dispatchImportTestExecutionResultsRequest(results);
            if (key === null) {
                (0, logging_1.logWarning)("No tests linked to Xray were executed. Skipping upload.");
            }
            return key;
        }
        catch (error) {
            (0, logging_1.logError)(`Failed to upload results to Xray: "${error}"`);
            this.writeErrorFile(error, "importExecutionResultsError");
        }
    }
    /**
     * Downloads feature (file) specifications from corresponding Xray issues.
     *
     * @param keys a string containing a list of issue keys separated by ";"
     * @param filter an integer that represents the filter ID
     * @returns the response of the Xray instance
     * @see https://docs.getxray.app/display/XRAYCLOUD/Exporting+Cucumber+Tests+-+REST+v2
     */
    exportCucumberTests(keys, filter) {
        try {
            return this.dispatchExportCucumberTestsRequest(keys, filter);
        }
        catch (error) {
            (0, logging_1.logError)(`Failed to export cucumber feature files: "${error}"`);
            this.writeErrorFile(error, "exportCucumberTestsError");
        }
    }
    /**
     * Uploads (zipped) feature file(s) to corresponding Xray issues.
     *
     * @param file the (zipped) Cucumber feature file(s)
     * @param projectKey key of the project where the tests and pre-conditions are going to be created
     * @param projectId id of the project where the tests and pre-conditions are going to be created
     * @param source a name designating the source of the features being imported (e.g. the source project name)
     * @returns the response of the Xray instance
     * @see https://docs.getxray.app/display/XRAYCLOUD/Exporting+Cucumber+Tests+-+REST+v2
     */
    importCucumberTests(file, projectKey, projectId, source) {
        try {
            return this.dispatchImportCucumberTestsRequest(file, projectKey, projectId, source);
        }
        catch (error) {
            (0, logging_1.logError)(`Failed to import cucumber feature files: "${error}"`);
            this.writeErrorFile(error, "importCucumberTestsError");
        }
    }
}
exports.XrayClient = XrayClient;
