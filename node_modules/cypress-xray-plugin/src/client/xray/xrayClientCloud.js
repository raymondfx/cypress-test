"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.XrayClientCloud = void 0;
const form_data_1 = __importDefault(require("form-data"));
const fs_1 = __importDefault(require("fs"));
const importExecutionResultsConverterCloud_1 = require("../../conversion/importExecutionResults/importExecutionResultsConverterCloud");
const requests_1 = require("../../https/requests");
const logging_1 = require("../../logging/logging");
const xrayClient_1 = require("./xrayClient");
class XrayClientCloud extends xrayClient_1.XrayClient {
    /**
     * The URL of Xray's Cloud API.
     * Note: API v1 would also work, but let's stick to the more recent one.
     */
    static URL = "https://xray.cloud.getxray.app/api/v2";
    async dispatchImportTestExecutionResultsRequest(results) {
        const json = new importExecutionResultsConverterCloud_1.ImportExecutionResultsConverterCloud().convertExecutionResults(results);
        if (!json.tests || json.tests.length === 0) {
            return null;
        }
        return this.credentials
            .getAuthenticationHeader({
            authenticationURL: `${XrayClientCloud.URL}/authenticate`,
        })
            .catch((error) => {
            (0, logging_1.logError)(`Failed to authenticate: "${error}"`);
            this.writeErrorFile(error, "authenticationError");
            throw error;
        })
            .then(async (header) => {
            (0, logging_1.logInfo)("Uploading test results...");
            const progressInterval = this.startResponseInterval(XrayClientCloud.URL);
            try {
                const response = await requests_1.Requests.post(`${XrayClientCloud.URL}/import/execution`, json, {
                    headers: {
                        ...header,
                    },
                });
                (0, logging_1.logSuccess)(`Successfully uploaded test execution results to ${response.data.key}.`);
                return response.data.key;
            }
            finally {
                clearInterval(progressInterval);
            }
        });
    }
    async dispatchExportCucumberTestsRequest(keys, filter) {
        const header = await this.credentials.getAuthenticationHeader({
            authenticationURL: `${XrayClientCloud.URL}/authenticate`,
        });
        (0, logging_1.logInfo)("Exporting cucumber tests...");
        const progressInterval = setInterval(() => {
            (0, logging_1.logInfo)("Still exporting...");
        }, 5000);
        try {
            const response = await requests_1.Requests.get(`${XrayClientCloud.URL}/export/cucumber`, {
                headers: {
                    ...header,
                },
                params: {
                    keys: keys,
                    filter: filter,
                },
            });
            // Extract filename from response.
            const contentDisposition = response.headers["Content-Disposition"];
            const filenameStart = contentDisposition.indexOf('"');
            const filenameEnd = contentDisposition.lastIndexOf('"');
            const filename = contentDisposition.substring(filenameStart, filenameEnd);
            fs_1.default.writeFile(filename, response.data, (error) => {
                throw new Error(`Failed to export cucumber feature files: "${error}"`);
            });
            throw new Error("Method not implemented.");
        }
        finally {
            clearInterval(progressInterval);
        }
    }
    async dispatchImportCucumberTestsRequest(file, projectKey, projectId, source) {
        const header = await this.credentials.getAuthenticationHeader({
            authenticationURL: `${XrayClientCloud.URL}/authenticate`,
        });
        (0, logging_1.logInfo)("Importing cucumber feature files...");
        const progressInterval = setInterval(() => {
            (0, logging_1.logInfo)("Still importing...");
        }, 5000);
        try {
            const fileContent = fs_1.default.createReadStream(file);
            const form = new form_data_1.default();
            form.append("file", fileContent);
            const response = await requests_1.Requests.post(`${XrayClientCloud.URL}/import/feature`, form, {
                headers: {
                    ...header,
                    ...form.getHeaders(),
                },
                params: {
                    projectKey: projectKey,
                    projectId: projectId,
                    source: source,
                },
            });
            if (response.data.updatedOrCreatedTests.length > 0) {
                (0, logging_1.logSuccess)("Successfully updated or created test issues:", JSON.stringify(response.data.updatedOrCreatedTests));
            }
            if (response.data.updatedOrCreatedPreconditions.length > 0) {
                (0, logging_1.logSuccess)("Successfully updated or created precondition issues:", JSON.stringify(response.data.updatedOrCreatedPreconditions));
            }
            if (response.data.errors.length > 0) {
                (0, logging_1.logError)("Encountered some errors during import:", JSON.stringify(response.data.errors));
            }
            return response.data;
        }
        finally {
            clearInterval(progressInterval);
        }
    }
}
exports.XrayClientCloud = XrayClientCloud;
