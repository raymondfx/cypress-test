"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.JiraClient = void 0;
const form_data_1 = __importDefault(require("form-data"));
const fs_1 = __importDefault(require("fs"));
const requests_1 = require("../../https/requests");
const logging_1 = require("../../logging/logging");
const client_1 = require("../client");
/**
 * A Jira client class for communicating with Jira instances.
 */
class JiraClient extends client_1.Client {
    /**
     * The Jira URL.
     */
    apiBaseURL;
    /**
     * Construct a new Jira client using the provided credentials.
     *
     * @param apiBaseURL the Jira base endpoint
     * @param credentials the credentials to use during authentication
     */
    constructor(apiBaseURL, credentials) {
        super(credentials);
        this.apiBaseURL = apiBaseURL;
    }
    /**
     * Adds one or more attachments to an issue. Attachments are posted as multipart/form-data.
     *
     * @param issueIdOrKey the ID or key of the issue that attachments are added to
     * @param files the files to attach
     * @returns a list of issue attachment responses
     * @see https://developer.atlassian.com/cloud/jira/platform/rest/v3/api-group-issue-attachments/#api-rest-api-3-issue-issueidorkey-attachments-post
     * @see https://docs.atlassian.com/software/jira/docs/api/REST/9.7.0/#api/2/issue/{issueIdOrKey}/attachments-addAttachment
     */
    async addAttachments(issueIdOrKey, ...files) {
        (0, logging_1.logInfo)(`Scanning files to attach to ${issueIdOrKey}...`);
        const existingFiles = files.filter((file) => {
            if (!fs_1.default.existsSync(file)) {
                (0, logging_1.logError)(`Failed to add attachment ${file}: file does not exist.`);
                return false;
            }
            return true;
        });
        if (existingFiles.length === 0) {
            (0, logging_1.logWarning)(`No files provided to attach to issue ${issueIdOrKey}. Skipping attaching.`);
            return [];
        }
        const form = new form_data_1.default();
        existingFiles.forEach((file) => {
            const fileContent = fs_1.default.createReadStream(file);
            form.append("file", fileContent);
        });
        try {
            return await this.credentials
                .getAuthenticationHeader()
                .then(async (header) => {
                (0, logging_1.logInfo)(`Attaching files...`);
                const progressInterval = this.startResponseInterval(this.apiBaseURL);
                try {
                    const response = await requests_1.Requests.post(`${this.apiBaseURL}/rest/api/2/issue/${issueIdOrKey}/attachments`, form, {
                        headers: {
                            ...header,
                            ...form.getHeaders(),
                            "X-Atlassian-Token": "no-check",
                        },
                    });
                    (0, logging_1.logSuccess)(`Successfully attached files to issue ${issueIdOrKey}:`, response.data
                        .map((attachment) => attachment.filename)
                        .join(", "));
                    return response.data;
                }
                finally {
                    clearInterval(progressInterval);
                }
            });
        }
        catch (error) {
            (0, logging_1.logError)(`Failed to attach files: "${error}"`);
            this.writeErrorFile(error, "addAttachmentError");
        }
    }
}
exports.JiraClient = JiraClient;
