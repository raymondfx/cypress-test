"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ImportExecutionResultsConverterCloud = void 0;
const path_1 = require("path");
const context_1 = require("../../context");
const testStatus_1 = require("../../types/testStatus");
const base64_1 = require("../../util/base64");
const files_1 = require("../../util/files");
const importExecutionResultsConverter_1 = require("./importExecutionResultsConverter");
/**
 * Converts Cypress run results into Xray Cloud JSON execution results.
 */
class ImportExecutionResultsConverterCloud extends importExecutionResultsConverter_1.ImportExecutionResultsConverter {
    getTest(attempt) {
        const json = {
            start: this.truncateISOTime(this.getAttemptStartDate(attempt).toISOString()),
            finish: this.truncateISOTime(this.getAttemptEndDate(attempt).toISOString()),
            status: this.getXrayStatus(this.getStatus(attempt)),
        };
        const evidence = [];
        if (context_1.CONTEXT.config.xray.uploadScreenshots) {
            attempt.screenshots.forEach((screenshot) => {
                let filename = (0, path_1.basename)(screenshot.path);
                if (context_1.CONTEXT.config.plugin.normalizeScreenshotNames) {
                    filename = (0, files_1.normalizedFilename)(filename);
                }
                evidence.push({
                    filename: filename,
                    data: (0, base64_1.encodeFile)(screenshot.path),
                });
            });
        }
        if (evidence.length > 0) {
            json.evidence = evidence;
        }
        return json;
    }
    getXrayStatus(status) {
        switch (status) {
            case testStatus_1.Status.PASSED:
                return context_1.CONTEXT.config.xray.statusPassed || "PASSED";
            case testStatus_1.Status.FAILED:
                return context_1.CONTEXT.config.xray.statusFailed || "FAILED";
            case testStatus_1.Status.PENDING:
                return context_1.CONTEXT.config.xray.statusPending || "TODO";
            case testStatus_1.Status.SKIPPED:
                return context_1.CONTEXT.config.xray.statusSkipped || "FAILED";
            default:
                throw new Error(`Unknown status: '${status}'`);
        }
    }
    getTestInfo(testResult) {
        const testInfo = {
            projectKey: context_1.CONTEXT.config.jira.projectKey,
            summary: testResult.title.join(" "),
            type: context_1.CONTEXT.config.xray.testType,
        };
        if (context_1.CONTEXT.config.xray.steps.update) {
            testInfo.steps = [{ action: this.truncateStepAction(testResult.body) }];
        }
        return testInfo;
    }
}
exports.ImportExecutionResultsConverterCloud = ImportExecutionResultsConverterCloud;
