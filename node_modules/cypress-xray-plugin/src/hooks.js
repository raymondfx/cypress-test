"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.filePreprocessorHook = exports.afterRunHook = exports.beforeRunHook = void 0;
const context_1 = require("./context");
const tagging_1 = require("./cucumber/tagging");
const logging_1 = require("./logging/logging");
const config_1 = require("./util/config");
const parsing_1 = require("./util/parsing");
function verifyJiraProjectKey(projectKey) {
    if (!projectKey) {
        throw new Error("Xray plugin misconfiguration: Jira project key was not set");
    }
}
function verifyJiraTestExecutionIssueKey(projectKey, testExecutionIssueKey) {
    if (testExecutionIssueKey && !testExecutionIssueKey.startsWith(projectKey)) {
        throw new Error(`Xray plugin misconfiguration: test execution issue key ${testExecutionIssueKey} does not belong to project ${projectKey}`);
    }
}
function verifyJiraTestPlanIssueKey(projectKey, testPlanIssueKey) {
    if (testPlanIssueKey && !testPlanIssueKey.startsWith(projectKey)) {
        throw new Error(`Xray plugin misconfiguration: test plan issue key ${testPlanIssueKey} does not belong to project ${projectKey}`);
    }
}
function verifyXraySteps(steps) {
    if (steps.maxLengthAction <= 0) {
        throw new Error(`Xray plugin misconfiguration: max length of step actions must be a positive number: ${steps.maxLengthAction}`);
    }
}
async function beforeRunHook(runDetails) {
    if (!context_1.CONTEXT) {
        throw new Error("Xray plugin misconfiguration: no configuration found." +
            " Make sure your project has been set up correctly: https://qytera-gmbh.github.io/projects/cypress-xray-plugin/section/configuration/introduction/");
    }
    (0, config_1.parseEnvironmentVariables)(runDetails.config.env);
    (0, config_1.initXrayClient)(runDetails.config.env);
    (0, config_1.initJiraClient)(runDetails.config.env);
    verifyJiraProjectKey(context_1.CONTEXT.config.jira.projectKey);
    verifyJiraTestExecutionIssueKey(context_1.CONTEXT.config.jira.projectKey, context_1.CONTEXT.config.jira.testExecutionIssueKey);
    verifyJiraTestPlanIssueKey(context_1.CONTEXT.config.jira.projectKey, context_1.CONTEXT.config.jira.testPlanIssueKey);
    verifyXraySteps(context_1.CONTEXT.config.xray.steps);
}
exports.beforeRunHook = beforeRunHook;
async function afterRunHook(results) {
    if (results.status === "failed") {
        (0, logging_1.logError)(`Aborting: failed to run ${results.failures} tests:`, results.message);
        return;
    }
    if (!context_1.CONTEXT.config.xray.uploadResults) {
        (0, logging_1.logWarning)("Skipping results upload: Plugin is configured to not upload test results.");
        return;
    }
    const runResult = results;
    const issueKey = await context_1.CONTEXT.xrayClient.importTestExecutionResults(runResult);
    if (issueKey === undefined) {
        (0, logging_1.logWarning)("Execution results import failed. Skipping remaining tasks.");
        return;
    }
    else if (issueKey === null) {
        (0, logging_1.logWarning)("Execution results import was skipped. Skipping remaining tasks.");
        return;
    }
    if (context_1.CONTEXT.jiraClient && context_1.CONTEXT.config.jira.attachVideos) {
        const videos = runResult.runs.map((result) => {
            return result.video;
        });
        if (videos.length === 0) {
            (0, logging_1.logWarning)("No videos were uploaded: No videos have been captured.");
        }
        else {
            await context_1.CONTEXT.jiraClient.addAttachments(issueKey, ...videos);
        }
    }
}
exports.afterRunHook = afterRunHook;
async function filePreprocessorHook(file) {
    if (file.filePath.endsWith(context_1.CONTEXT.config.cucumber.featureFileExtension)) {
        const relativePath = file.filePath.substring(file.filePath.indexOf("cypress"));
        try {
            // Extract tag information for later use, e.g. when uploading test results to specific
            // issues.
            const feature = (0, parsing_1.parseFeatureFile)(file.filePath).feature;
            context_1.CONTEXT.config.cucumber.issues = (0, tagging_1.issuesByScenario)(feature, context_1.CONTEXT.config.jira.projectKey);
            if (context_1.CONTEXT.config.cucumber.downloadFeatures) {
                // TODO: download feature file from Xray.
                throw new Error("feature not yet implemented");
            }
            if (context_1.CONTEXT.config.cucumber.uploadFeatures) {
                (0, logging_1.logInfo)(`Synchronizing upstream Cucumber tests (${relativePath})`);
                await context_1.CONTEXT.xrayClient.importCucumberTests(file.filePath, context_1.CONTEXT.config.jira.projectKey);
            }
        }
        catch (error) {
            (0, logging_1.logError)(`Feature file invalid, skipping synchronization: ${error}`);
        }
    }
    return file.filePath;
}
exports.filePreprocessorHook = filePreprocessorHook;
